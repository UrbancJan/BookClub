http://localhost:3000/ 


1. Najprej sem ostvaril nov projekt 
rails new BookClub

V terminal sem nato vpisal naslednjo komando
2. rails generate scaffold Book title:string author:string description:text

Ter pognal migracijo
3. rake db:migrate


4. Za dodajanje slik knjig sem uporabil paperclip gem. Najprej sem moral naložiti imagemagick za delovanje
paperclip gema. To sem storil da sem v terminal vnesel komando 
sudo apt-get install imagemagick

V gemfile sem dal 
gem "paperclip", "~> 5.2.1 
in v terminalu zagnal 
bundle 
da se je gem naložil.

V app/models/book.rb sem vnesel 
has_attached_file :image, styles: { medium: "300x300>", thumb: "100x100>" } 
validates_attachment_content_type :image, content_type: /\Aimage\/.*\z/

Da sem ustvaril migracijo sem v terminal napisal 
rails generate paperclip book image
To spremeni tabelo books in doda image attachment

Dodamo 
rake db:migrate

Nato sem v app/views/books/_form.html.erb dodal

na vrhu html: { multipart: true }

ter

 <div class="field">
    <%= f.label :image %><br>
    <%= f.file_field :image %>
  </div>


v app/controllers/concerns/books_controller.rb sem v 
def book_params dodal
:image
params.require(:book).permit(:title, :author, :description, :image)


v app/views/show.html.erb da se bo slika videla sem dodal 
<%= image_tag @book.image.url(:medium) %>

Da se bodo slike videle na prvi strani sem v index.html.erb dodal 
<td><%= image_tag book.image.url(:thumb) %></td>


Totorial, ki sem ga uprabil https://www.youtube.com/watch?v=Z5W-Y3aROVE

5.

Nato sem naložil devise gem

v gem file sem dodal 
gem 'devise' 

in v terminal zagnal 
bundle install

nato pa 
rails generate devise:install


Pote pa 
rails generate devise User

To naredi tabelo user
nato pa 
rake db:migrate


6. 
Dodal sem nav bar zato da ni trba pisati v url
v app/views/layouts/application.html.erb sem dodal

<div>
	<%= link_to "BookClub", root_path %>

	<ul>
		<% if !user_signed_in? %>
		<li><%= link_to "Sign Up", new_user_registration_path %></li>
		<% end %>
		<% if user_signed_in? %>
		<li><%= link_to "Sign Out", destroy_user_session_path, method: :delete %></li>
		<% else %>
		<li><%= link_to "Login", new_user_session_path %> </li>
		<% end %>
	</ul>
	<% if user_signed_in? %>
		<p><%= link_to "New Book", new_book_path %></p>

	<% end %>
</div>


7.
da naredimo povezavo med user in book sem naredil 
rails g migration add_user_id_to_books user_id:integer 
To doda user_id v books 

nato pa
rake db:migrate

potem sem ustvaril asociacije
v app/models/book.rb sem dodal 
belongs_to :user

v app/models/user.rb sem dodal 
has_many :books


POtem sem v app/controllers/books_controller.rb

def new
    @book = Book.new
  end

spremenil v

 def new
    @book = current_user.books.build
  end

ter

 def create
    @book = Book.new(book_params)

spremenil v
  def create
    @book = current_user.books.build(book_params)


8. Komentarji

rails g scaffold Comment content:text book:references user:references
rake db:migrate

references ustvarijo naslednje odvisnosti v comment.rb modelu
belong_to: book
belong_to: user



v app/models/book.rb
sem dodal  has_many :comments

v app/models/user.rb
has_many :comments


v config/routes.rb sem dodal do 
resources :books do  
  resources :comments
end


v comments_controller.rb sem dodal

  def create
    @book = Book.find(params[:book_id])  //najdemo knjigo
    @comment = @book.comments.create(comment_params) // naredimo komentar glede na knjigo
    @comment.user_id = current_user.id // naredimo komentar glede na trenutni user



v app/views/comments/_form.html.erb

<%= form_for([@book, @book.comment.build]) do |f| %>

  <div class="field">
    <%= f.label :content %><br>
    <%= f.text_area :content %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>


v views/books/show.html.erb sem dodal 
<%= render 'comments/form' %> 
s tem lahko vidimo form za vpisovanje komentarjev 


nato sem v comments naredil nov _comment.html.erb file
<p><%=comment.content %></p>
S tem dobivamo vsebino komentarja

v books/show.html.erb sem dodal
<%= render @book.comments%> 
da vidimo komentarje


v _comment.html.erb sem dodal še linke do delete in edit
<%= link_to "Edit", edit_book_comment_path(comment.book, comment) %>   //comment.book najde id knjige, comment pa najde id komentarja
<%= link_to "Delete", book_comment_path(comment.book, comment), method: :delete, data: {confirm: "Are you sure?"}%>




v comments_controller.rb sem naredil slednje:


  def edit
    @book = Book.find(params[:book_id])  // najde knjigo
    @comment = @book.comments.find(params[:id]) // najde komentar, ki ustreza id 
  end




  def destroy
    @comment.destroy
    respond_to do |format|
      format.html { redirect_to book_path(@book = Book.find(params[:book_id])), notice: 'Comment was successfully destroyed.' }
      format.json { head :no_content }
    end
  end




v books/show.html.erb sem dodal

<p>Posted by <%= @book.user.email%> <%= time_ago_in_words(@book.created_at) %> ago</p>


v comments/_comment.html.erb sem dodal
<p>Posted by: <%=comment.user.email %> <%= time_ago_in_words(comment.created_at) %> ago</p>




v books/show.html.erb sem dodal
<% if user_signed_in? %>
<% if @book.user_id == current_user.id %> 

da lahko briše in spreminja samo lastnik objave



v comments/_comment.html.erb sem dodal
<% if user_signed_in? %>
<% if comment.user_id == current_user.id %>


Nato sem v controllers/books_controller.rb dodal
 before_filter :authenticate_user!, except: [:index, :show]


v comments_controller.rb sem dodal
 before_filter :authenticate_user!
